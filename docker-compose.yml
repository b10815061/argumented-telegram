version: '3.8'
services:
  ### ===================
  ### APP SERVICE
  ### ===================
  app:
    container_name: app
    restart: always
    build: .
    healthcheck:
      interval: 120ms
      retries: 50
      start_period: 120s
      test: |
        echo "hi i am working , i am app"
      timeout: 60ms
    env_file:
      - .env
    ports:
      - "5000:5000"
    networks:
      - telethon_network
    depends_on:
      - db
  ### ===================
  ### DB SERVICE
  ### ===================
  db:
    container_name: db
    image: postgres:12-alpine
    restart: always
    healthcheck:
      interval: 120ms
      retries: 50
      start_period: 120s
      test: |
        touch /tmp/healthcheck.txt &&
        mkdir /tmp/healthcheck &&
        mv /tmp/healthcheck.txt /tmp/healthcheck &&
        cd /tmp/healthcheck &&
        echo "hello my docker container is working fine" >> healthcheck.txt &&
        cat healthcheck.txt &&
        rm healthcheck.txt &&
        cd .. &&
        rmdir /tmp/healthcheck
        cls
      timeout: 60ms
    environment:
      POSTGRES_DB: telegram
      POSTGRES_USER: tommy
      POSTGRES_PASSWORD: astrongpassword
    ports:
      - 5430:5432
    volumes:
      - tele-compose-data:/var/lib/postgresql/data
    networks:
      - telethon_network
  ### ===================
  ### CACHE SERVER SERVICE
  ### ===================
  redis:
    container_name: app-redis
    image: redis
    restart: always
    healthcheck:
      interval: 120ms
      retries: 50
      start_period: 120s
      test: |
        touch /tmp/healthcheck.txt &&
        mkdir /tmp/healthcheck &&
        mv /tmp/healthcheck.txt /tmp/healthcheck &&
        cd /tmp/healthcheck &&
        echo "hello my docker container is working fine" >> healthcheck.txt &&
        cat healthcheck.txt &&
        rm healthcheck.txt &&
        cd .. &&
        rmdir /tmp/healthcheck
        cls
      timeout: 60ms
    ports:
      - 6379:6379
    networks:
      - telethon_network
  
### ========================
### VOLUMES PERSISTENT DATA
### ========================
volumes:
  tele-compose-data:
### ===================================
### NETWORKS GROUP FOR ONE SAME SERVICE
### ===================================
networks:
  telethon_network: